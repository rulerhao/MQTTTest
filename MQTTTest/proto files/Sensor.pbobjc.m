// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Sensor.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Sensor);
GPBObjCClassDeclaration(Sensor_BatteryProperty);
GPBObjCClassDeclaration(Sensor_BreathProperty);
GPBObjCClassDeclaration(Sensor_MotionProperty);
GPBObjCClassDeclaration(Sensor_TemperatureProperty);

#pragma mark - SensorRoot

@implementation SensorRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SensorRoot_FileDescriptor

static GPBFileDescriptor *SensorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"ouhub.device"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Sensor

@implementation Sensor

@dynamic propertyOneOfCase;
@dynamic index;
@dynamic temperatureProperty;
@dynamic batteryProperty;
@dynamic breathProperty;

typedef struct Sensor__storage_ {
  uint32_t _has_storage_[2];
  int32_t index;
  Sensor_TemperatureProperty *temperatureProperty;
  Sensor_BatteryProperty *batteryProperty;
  Sensor_BreathProperty *breathProperty;
} Sensor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = Sensor_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Sensor__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "temperatureProperty",
        .dataTypeSpecific.clazz = GPBObjCClass(Sensor_TemperatureProperty),
        .number = Sensor_FieldNumber_TemperatureProperty,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Sensor__storage_, temperatureProperty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "batteryProperty",
        .dataTypeSpecific.clazz = GPBObjCClass(Sensor_BatteryProperty),
        .number = Sensor_FieldNumber_BatteryProperty,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Sensor__storage_, batteryProperty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "breathProperty",
        .dataTypeSpecific.clazz = GPBObjCClass(Sensor_BreathProperty),
        .number = Sensor_FieldNumber_BreathProperty,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Sensor__storage_, breathProperty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sensor class]
                                     rootClass:[SensorRoot class]
                                          file:SensorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sensor__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "property",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Sensor_ClearPropertyOneOfCase(Sensor *message) {
  GPBDescriptor *descriptor = [Sensor descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Sensor_TemperatureProperty

@implementation Sensor_TemperatureProperty

@dynamic value;

typedef struct Sensor_TemperatureProperty__storage_ {
  uint32_t _has_storage_[1];
  float value;
} Sensor_TemperatureProperty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = Sensor_TemperatureProperty_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Sensor_TemperatureProperty__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sensor_TemperatureProperty class]
                                     rootClass:[SensorRoot class]
                                          file:SensorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sensor_TemperatureProperty__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Sensor)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Sensor_BatteryProperty

@implementation Sensor_BatteryProperty

@dynamic value;

typedef struct Sensor_BatteryProperty__storage_ {
  uint32_t _has_storage_[1];
  int32_t value;
} Sensor_BatteryProperty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = Sensor_BatteryProperty_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Sensor_BatteryProperty__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sensor_BatteryProperty class]
                                     rootClass:[SensorRoot class]
                                          file:SensorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sensor_BatteryProperty__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Sensor)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Sensor_BreathProperty

@implementation Sensor_BreathProperty

@dynamic value;
@dynamic hasMotionProperty, motionProperty;

typedef struct Sensor_BreathProperty__storage_ {
  uint32_t _has_storage_[1];
  Sensor_MotionProperty *motionProperty;
} Sensor_BreathProperty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = Sensor_BreathProperty_FieldNumber_Value,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "motionProperty",
        .dataTypeSpecific.clazz = GPBObjCClass(Sensor_MotionProperty),
        .number = Sensor_BreathProperty_FieldNumber_MotionProperty,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Sensor_BreathProperty__storage_, motionProperty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sensor_BreathProperty class]
                                     rootClass:[SensorRoot class]
                                          file:SensorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sensor_BreathProperty__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Sensor)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Sensor_MotionProperty

@implementation Sensor_MotionProperty

@dynamic valueX;
@dynamic valueY;
@dynamic valueZ;

typedef struct Sensor_MotionProperty__storage_ {
  uint32_t _has_storage_[1];
  float valueX;
  float valueY;
  float valueZ;
} Sensor_MotionProperty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "valueX",
        .dataTypeSpecific.clazz = Nil,
        .number = Sensor_MotionProperty_FieldNumber_ValueX,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Sensor_MotionProperty__storage_, valueX),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "valueY",
        .dataTypeSpecific.clazz = Nil,
        .number = Sensor_MotionProperty_FieldNumber_ValueY,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Sensor_MotionProperty__storage_, valueY),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "valueZ",
        .dataTypeSpecific.clazz = Nil,
        .number = Sensor_MotionProperty_FieldNumber_ValueZ,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Sensor_MotionProperty__storage_, valueZ),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sensor_MotionProperty class]
                                     rootClass:[SensorRoot class]
                                          file:SensorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sensor_MotionProperty__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Sensor)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
