// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Message.pbobjc.h"
#import "Device.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(NotifyStatusRequest);
GPBObjCClassDeclaration(PostMeasureRequest);
GPBObjCClassDeclaration(RepostMeasureRequest);
GPBObjCClassDeclaration(Response);

#pragma mark - MessageRoot

@implementation MessageRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MessageRoot_FileDescriptor

static GPBFileDescriptor *MessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"ouhub"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Message

@implementation Message

@dynamic bodyOneOfCase;
@dynamic messageId;
@dynamic clientId;
@dynamic response;
@dynamic notifyStatusRequest;
@dynamic postMeasureRequest;
@dynamic repostMeasureRequest;

typedef struct Message__storage_ {
  uint32_t _has_storage_[2];
  NSString *messageId;
  NSString *clientId;
  Response *response;
  NotifyStatusRequest *notifyStatusRequest;
  PostMeasureRequest *postMeasureRequest;
  RepostMeasureRequest *repostMeasureRequest;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "response",
        .dataTypeSpecific.clazz = GPBObjCClass(Response),
        .number = Message_FieldNumber_Response,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message__storage_, response),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notifyStatusRequest",
        .dataTypeSpecific.clazz = GPBObjCClass(NotifyStatusRequest),
        .number = Message_FieldNumber_NotifyStatusRequest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message__storage_, notifyStatusRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "postMeasureRequest",
        .dataTypeSpecific.clazz = GPBObjCClass(PostMeasureRequest),
        .number = Message_FieldNumber_PostMeasureRequest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message__storage_, postMeasureRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "repostMeasureRequest",
        .dataTypeSpecific.clazz = GPBObjCClass(RepostMeasureRequest),
        .number = Message_FieldNumber_RepostMeasureRequest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message__storage_, repostMeasureRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "body",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Message_ClearBodyOneOfCase(Message *message) {
  GPBDescriptor *descriptor = [Message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Response

@implementation Response

@dynamic requestMessageId;
@dynamic code;
@dynamic message;

typedef struct Response__storage_ {
  uint32_t _has_storage_[1];
  Response_ResponseCode code;
  NSString *requestMessageId;
  NSString *message;
} Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestMessageId",
        .dataTypeSpecific.clazz = Nil,
        .number = Response_FieldNumber_RequestMessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Response__storage_, requestMessageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = Response_ResponseCode_EnumDescriptor,
        .number = Response_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Response__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = Response_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Response__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Response class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Response__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Response_Code_RawValue(Response *message) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_Code];
  return GPBGetMessageRawEnumField(message, field);
}

void SetResponse_Code_RawValue(Response *message, int32_t value) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_Code];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Response_ResponseCode

GPBEnumDescriptor *Response_ResponseCode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UnknowErrorCode\000Ok\000BadRequest\000Forbidden\000"
        "NotFound\000ServerError\000";
    static const int32_t values[] = {
        Response_ResponseCode_UnknowErrorCode,
        Response_ResponseCode_Ok,
        Response_ResponseCode_BadRequest,
        Response_ResponseCode_Forbidden,
        Response_ResponseCode_NotFound,
        Response_ResponseCode_ServerError,
    };
  }
  return descriptor;
}

BOOL Response_ResponseCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case Response_ResponseCode_UnknowErrorCode:
    case Response_ResponseCode_Ok:
    case Response_ResponseCode_BadRequest:
    case Response_ResponseCode_Forbidden:
    case Response_ResponseCode_NotFound:
    case Response_ResponseCode_ServerError:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
